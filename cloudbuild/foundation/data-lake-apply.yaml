timeout: 3600s

steps:

# DATA LAKE PROJECT

- id: "datalake project - init"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/data-lake'
  args: [
    'init',
    '-backend-config=bucket=${_BUCKET}',
    '-backend-config=prefix=${_PREFIX}/$BRANCH_NAME/data-lake'
  ]

- id: "terraform workspace"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/data-lake'
  entrypoint: /bin/sh
  args:
    - '-c'
    - |
        terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME

- id: Terraform Format
  name: 'hashicorp/terraform:${_TAG}'
  dir: 'environment/foundation/data-lake'
  args: ['fmt',
    '-check'
    ]

- id: Terraform Validate
  name: 'hashicorp/terraform:${_TAG}'
  dir: 'environment/foundation/data-lake'
  args: ['validate',
    '-no-color'
    ]

- id: "datalake project - turn off org policy plan"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/data-lake'
  args: [
    'plan',
    '-var-file=env/${_TFVARS_FILE}.tfvars',
    '-var=enforce=false'
  ]

- id: "datalake project - turn off org policy apply"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/data-lake'
  args: [
    'apply',
    '-var-file=env/${_TFVARS_FILE}.tfvars',
    '-var=enforce=false',
    '-auto-approve'
  ]

- id: "datalake project - turn on org policy plan"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/data-lake'
  args: [
    'plan',
    '-var-file=env/${_TFVARS_FILE}.tfvars',
  ]

- id: "datalake project - turn on org policy apply"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/data-lake'
  args: [
    'apply',
    '-var-file=env/${_TFVARS_FILE}.tfvars',
    '-auto-approve'
  ]

# - id: "output file creation - datalake projects"
#   name: hashicorp/terraform:${_TAG}
#   dir: 'environment/foundation/data-lake'
#   entrypoint: /bin/sh
#   args: [
#     '-c',
#     'terraform output -json > /workspace/data-lake-output.json && cat /workspace/data-lake-output.json'
#   ]

# - id: "data-ops project state pull - init"
#   name: hashicorp/terraform:${_TAG}
#   dir: 'environment/foundation/data-ops'
#   args: [
#     'init',
#     '-backend-config=bucket=${_BUCKET}',
#     '-backend-config=prefix=${_PREFIX}/$BRANCH_NAME/data-ops'
#   ]

# - id: "tf workspace - data-ops"
#   name: hashicorp/terraform:${_TAG}
#   dir: 'environment/foundation/data-ops'
#   entrypoint: /bin/sh
#   args:
#     - '-c'
#     - |
#         terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME

# - id: "output file creation - data-ops project"
#   name: hashicorp/terraform:${_TAG}
#   dir: 'environment/foundation/data-ops'
#   entrypoint: /bin/sh
#   args: [
#     '-c',
#     'terraform output -json > /workspace/staging-output.json && cat /workspace/staging-output.json'
#   ]

# - id: "load variables for Datalake DAG envs"
#   name: gcr.io/cloud-builders/gcloud
#   dir: 'environment/foundation/data-lake/cloud-composer/composer-dag-files'
#   entrypoint: python
#   args: [
#     'set_data_lake_dag_envs.py'
#   ]

# - id: "cloud-composer project state pull - init"
#   name: hashicorp/terraform:${_TAG}
#   dir: 'environment/foundation/data-ops/cloud-composer'
#   args: [
#     'init',
#     '-backend-config=bucket=${_BUCKET}',
#     '-backend-config=prefix=${_PREFIX}/$BRANCH_NAME/cloud-composer'
#   ]

# - id: "tf workspace - pull composer state"
#   name: hashicorp/terraform:${_TAG}
#   dir: 'environment/foundation/data-ops/cloud-composer'
#   entrypoint: /bin/sh
#   args:
#     - '-c'
#     - |
#         terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME

# - id: "export bucket name"
#   name: hashicorp/terraform:${_TAG}
#   dir: 'environment/foundation/data-ops/cloud-composer'
#   entrypoint: /bin/sh
#   args: 
#     - '-c'
#     - |
#         terraform output -raw gcs_bucket > /workspace/gcs_bucket.txt
#         echo "the bucket name is $(cat /workspace/gcs_bucket.txt)"

# - id: "load DAG to GCS bucket"
#   name: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
#   dir: 'environment/foundation/data-ops/cloud-composer/composer-dag-files'
#   entrypoint: /bin/sh
#   args: 
#     - '-c'
#     - |
#         gsutil cp -n /workspace/*_DAG.py $(cat /workspace/gcs_bucket.txt)