# If you use deep learning images, Deep learning images are based off of Debian. Have to specify a different project and source iamge
# https://cloud.google.com/deep-learning-vm/docs/images

timeout: 7200s
steps:
# Which branch to use
- id: "store git branch"
  name: ubuntu
  entrypoint: bash
  args:
  - -c
  - |
      # save git branch to persistent volume: /workspace
      echo "Current branch name is $BRANCH_NAME"
      echo ""      
      if [[ "$BRANCH_NAME" == test* ]] || [[ "$BRANCH_NAME" == test ]]; then
        branch=test
        echo "Branch Name is now $branch"
        echo $branch > /workspace/branch.txt
      elif [[ "$BRANCH_NAME" == main* ]] || [[ "$BRANCH_NAME" == main ]]; then
        branch=main
        echo "Branch Name is now $branch"
        echo $branch > /workspace/branch.txt
      fi

- id: "terraform init"
# initialize terraform
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/image'
  entrypoint: /bin/sh
  args:
    - '-c'
    - |
        terraform init -backend-config=bucket=${_BUCKET} -backend-config=prefix=${_PREFIX}/$(cat /workspace/branch.txt)/image

- id: "terraform workspace"
# select the correct workspace based off the long running branch
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/image'
  entrypoint: /bin/sh
  args:
    - '-c'
    - |
        terraform workspace select $(cat /workspace/branch.txt) || terraform workspace new $(cat /workspace/branch.txt)

- id: "terraform export project info"
# have terraform output project relate info and save to cloud build workspace for next steps
# if terraform output is not a string, must export as json
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/foundation/image'
  entrypoint: /bin/sh
  args:
    - '-c'
    - |
        terraform output -raw project_id > /workspace/project_id.txt
        terraform output -raw packer_container_artifact_repo_id > /workspace/repo_id.txt
        terraform output -json subnets_regions > /workspace/subnets_regions.json
        terraform output -json subnets_names > /workspace/subnets_names.json
        terraform output -raw image_build_email > /workspace/image_build_email.txt
        terraform output -raw image_builder_vm > /workspace/image_builder_vm.txt

        echo "project id is $(cat /workspace/project_id.txt)"
        echo "repo id is $(cat /workspace/repo_id.txt)"
        echo "image build sa is $(cat /workspace/image_build_email.txt)"
        echo "image builder vm is $(cat /workspace/image_builder_vm.txt)"   
        echo "regions are $(cat /workspace/subnets_regions.json)"
        echo "subnets json are $(cat /workspace/subnets_names.json)"

- name: dwdraju/alpine-curl-jq
# JQuery must be used to retrieve value from jq output
  id: 'use jquery'
  entrypoint: /bin/sh
  args:
    - '-c'
    - |
        jq -r '.[0]' /workspace/subnets_names.json > /workspace/subnet_name.txt
        jq -r '.[0]' /workspace/subnets_regions.json > /workspace/subnets_regions.txt

- name: ubuntu
# Build the packer.json file on the fly
  id: 'create_image_spec'
  entrypoint: "bash"
  args:
    - '-c'
    - |
      cat <<END>packer.json
      {
      "builders": [
        {
          "type": "googlecompute",
          "instance_name": "$(cat /workspace/image_builder_vm.txt)",
          "disk_size": "50",
          "project_id": "$(cat /workspace/project_id.txt)",
          "source_image_family": "${_IMAGE_FAMILY}",
          "image_name": "packer-data-science-$SHORT_SHA",
          "image_family": "packer-data-science",
          "image_description": "created-with-packer",
          "labels": {
            "version": "version1"
          },
          "communicator": "ssh",
          "ssh_username": "ubuntu",
          "service_account_email": "$(cat /workspace/image_build_email.txt)",
          "subnetwork" : "projects/$(cat /workspace/project_id.txt)/regions/$(cat /workspace/subnets_regions.txt)/subnetworks/$(cat /workspace/subnet_name.txt)",
          "zone": "$(cat /workspace/subnets_regions.txt)-b",
          "image_storage_locations": ["$(cat /workspace/subnets_regions.txt)"],
          "tags": ["packer"],
          "use_os_login":false,
          "enable_secure_boot": true,
          "enable_vtpm": true,
          "enable_integrity_monitoring": true,          
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/compute",
            "https://www.googleapis.com/auth/devstorage.full_control",
            "https://www.googleapis.com/auth/logging.admin"
          ]
        }
        ],
      "provisioners": [
        {
          "type": "shell",
          "inline": [
            "sudo apt-get update -y",
            "sudo apt-get upgrade -qq",
            "curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh",
            "sudo bash add-google-cloud-ops-agent-repo.sh --also-install",
            "sudo DEBIAN_FRONTEND=noninteractive apt-get -y install xfce4",
            "sudo apt-get install xfce4-session -y",
            "sudo apt-get -y install xrdp python3-pip python3-venv firefox r-base gdebi-core libssl3",
            "sudo wget --quiet https://s3.amazonaws.com/rstudio-ide-build/desktop/jammy/amd64/rstudio-2022.07.3-583-amd64.deb -O rstudio.deb",
            "sudo apt install ./rstudio.deb -y",
            "sudo wget --quiet https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O google-chrome.deb",
            "sudo apt install ./google-chrome.deb -y",
            "sudo wget --quiet https://github.com/GoogleCloudPlatform/gcsfuse/releases/download/v0.41.10/gcsfuse_0.41.10_amd64.deb -O gcsfuse.deb",
            "sudo apt install ./gcsfuse.deb -y",
            "sudo snap install code --classic",
            "sudo snap install google-cloud-cli --classic",
            "sudo snap install pycharm-community --classic",
            "sudo snap install squirrelsql evince",
            "sudo systemctl enable xrdp",
            "sudo adduser xrdp ssl-cert",
            "sudo useradd -m -U clientadmin",
            "sudo usermod -aG ssl-cert clientadmin",
            "sudo usermod -aG sudo clientadmin",
            "echo clientadmin:Burw00d! | sudo chpasswd",
            "sudo apt-get install xubuntu-desktop -y",
            "echo xfce4-session >~/.xsession",
            "echo 'PATH=$$PATH:~/.local/bin:/snap/bin:~/anaconda/bin' | sudo tee /etc/profile.d/path_add.sh",
            "sudo sed -i 's/rdpdr=true/rdpdr=false/g' /etc/xrdp/xrdp.ini",
            "sudo sed -i 's/cliprdr=true/cliprdr=false/g' /etc/xrdp/xrdp.ini",
            "sudo -u clientadmin bash -c 'python3 -m pip install pip wheel --upgrade'",
            "sudo -u clientadmin bash -c 'python3 -m pip install --user pipx'",
            "sudo -u clientadmin bash -c 'python3 -m pipx ensurepath'",
            "sudo -u clientadmin bash -c 'python3 -m pipx install jupyterlab'",
            "sudo wget --quiet https://repo.anaconda.com/archive/Anaconda3-2022.10-Linux-x86_64.sh -O anaconda.sh",
            "sudo chmod +x anaconda.sh",
            "sudo bash anaconda.sh -b -p /home/clientadmin/anaconda",
            "sudo chown -R clientadmin:clientadmin /home/clientadmin/anaconda",
            "curl https://us-central1-apt.pkg.dev/doc/repo-signing-key.gpg | sudo apt-key add - && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -",
            "echo 'deb http://packages.cloud.google.com/apt apt-transport-artifact-registry-stable main' | sudo tee -a /etc/apt/sources.list.d/artifact-registry.list"
          ]
        }
        ]
      }
      END

- id: 'VM Build and Image Creation'
  name: '${_REGION}-docker.pkg.dev/${_IMAGE_PROJECT_ID}/packer/packer:${_PACKER_VERSION}'
  args:
    - build
    - -var
    - project_id=${_IMAGE_PROJECT_ID}
    - packer.json

substitutions:
  _PACKER_VERSION: 1.8.4
  _IMAGE_FAMILY: ubuntu-2204-lts
  _IMAGE_PROJECT_ID: prod-sde-image-factory-68b6
  _REGION: us-central1
  
options:
  machineType: 'N1_HIGHCPU_8'

# https://cloud.google.com/compute/docs/images/os-details